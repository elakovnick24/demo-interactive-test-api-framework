plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.9.6'
    id "io.freefair.lombok" version "6.4.2"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(
            'org.projectlombok:lombok:1.18.16'
    )
}

def allureVersion = "2.17.3",
    junitVersion = "5.8.2",
    restAssuredVersion = "5.0.1",
    lombokVersion = "1.18.24"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        autoconfigure.set(true)
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}


dependencies {

    compileOnly 'org.projectlombok:lombok:$lombokVersion'
    annotationProcessor 'org.projectlombok:lombok:$lombokVersion'
    testCompileOnly 'org.projectlombok:lombok:$lombokVersion'
    testAnnotationProcessor 'org.projectlombok:lombok:$lombokVersion'

    implementation(
            'com.fasterxml.jackson.core:jackson-core:2.13.2',
            'com.fasterxml.jackson.core:jackson-annotations:2.13.2',
            'com.fasterxml.jackson.core:jackson-databind:2.13.2.2'

    )

    testImplementation(
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "org.junit.jupiter:junit-jupiter-api:$junitVersion",
            "org.junit.jupiter:junit-jupiter-params:$junitVersion",
            "org.assertj:assertj-core:3.22.0",
            "org.aeonbits.owner:owner:1.0.12",
            "org.aspectj:aspectjweaver:1.9.6",
            "org.slf4j:slf4j-simple:1.7.36",
            "commons-io:commons-io:2.6",
    )

    testRuntimeOnly(
            "org.slf4j:slf4j-simple:1.7.29",
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
//            events "started", "failed"
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}